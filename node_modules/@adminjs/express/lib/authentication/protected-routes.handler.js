"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAdminRoute = exports.withProtectedRoutesHandler = void 0;
const adminjs_1 = require("adminjs");
const convertRoutes_1 = require("../convertRoutes");
const path_to_regexp_1 = require("path-to-regexp");
const withProtectedRoutesHandler = (router, admin) => {
    const { rootPath, loginPath, logoutPath } = admin.options;
    router.use((req, res, next) => {
        if (isAdminAsset(req.originalUrl)) {
            next();
        }
        else if (req.session.adminUser ||
            // these routes doesn't need authentication
            req.originalUrl.startsWith(loginPath) ||
            req.originalUrl.startsWith(logoutPath)) {
            next();
        }
        else if (exports.isAdminRoute(req.originalUrl, rootPath)) {
            // If the redirection is caused by API call to some action just redirect to resource
            const [redirectTo] = req.originalUrl.split("/actions");
            req.session.redirectTo = redirectTo.includes(`${rootPath}/api`)
                ? rootPath
                : redirectTo;
            req.session.save((err) => {
                if (err) {
                    next(err);
                }
                res.redirect(loginPath);
            });
        }
        else {
            next();
        }
    });
};
exports.withProtectedRoutesHandler = withProtectedRoutesHandler;
const isAdminRoute = (url, adminRootPath) => {
    const adminRoutes = adminjs_1.Router.routes
        .map((route) => convertRoutes_1.convertToExpressRoute(route.path))
        .filter((route) => route !== "");
    let urlWithoutAdminRootPath = url;
    if (adminRootPath !== "/") {
        urlWithoutAdminRootPath = url.replace(adminRootPath, "");
        if (!urlWithoutAdminRootPath.startsWith("/")) {
            urlWithoutAdminRootPath = `/${urlWithoutAdminRootPath}`;
        }
    }
    const isAdminRootUrl = url === adminRootPath;
    return (isAdminRootUrl ||
        !!adminRoutes.find((route) => path_to_regexp_1.pathToRegexp(route).test(urlWithoutAdminRootPath)));
};
exports.isAdminRoute = isAdminRoute;
const isAdminAsset = (url) => adminjs_1.Router.assets.find((asset) => url.match(asset.path));
//# sourceMappingURL=protected-routes.handler.js.map